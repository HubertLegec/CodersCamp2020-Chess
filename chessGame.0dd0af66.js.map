{"version":3,"sources":["src/app/display/URLParameters.ts","src/app/display/GamePage.ts","src/app/game/Move.ts","src/app/game/Player.ts","src/app/game/Square.ts","src/app/game/Pieces/PieceType.ts","src/app/display/DrawPiece.ts","src/app/game/Pieces/Piece.ts","src/app/game/MoveDirection.ts","src/app/game/Pieces/Pawn.ts","src/app/game/Pieces/Knight.ts","src/app/game/Pieces/Bishop.ts","src/app/game/Pieces/Rook.ts","src/app/game/Pieces/Queen.ts","src/app/game/Pieces/King.ts","src/app/game/Board.ts","src/app/game/GameStatus.ts","src/app/game/Game.ts","src/app/ChessApp.ts","src/chessGame.ts"],"names":[],"mappings":"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","file":"chessGame.0dd0af66.js","sourceRoot":"..","sourcesContent":["export class URLParameters {\n    private _params: Array<string>;\n\n    constructor(url: string) {\n        this._params = [];\n        const urlSearchParams = new URLSearchParams(url);\n        urlSearchParams.forEach(param => this._params.push(param));\n    }\n    \n    getFirstName() {\n        return this._params[0];\n    }\n\n    getSecondName() {\n        return this._params[1];\n    }\n    \n    getTime(){\n        return this._params[2];\n    }\n}","export class GamePage {\n    private _firstPlayerName: string;\n    private _secondPlayerName: string;\n    private onClick;\n\n    constructor(firstPlayerName: string, secondPlayerName: string){\n        this._firstPlayerName = firstPlayerName;\n        this._secondPlayerName = secondPlayerName;\n    }\n\n    displayGameInfo() {\n        this.displayPlayersNames();\n        this.addUndoButtonHandler();\n    }\n\n    public addOnClick(onClick: () => any){\n        this.onClick = onClick;\n    }\n\n    private displayPlayersNames(){\n        const firstPlayer = document.getElementById('firstPlayerName');\n        const secondPlayer = document.getElementById('secondPlayerName');\n\n        firstPlayer.textContent = this._firstPlayerName;\n        secondPlayer.textContent = this._secondPlayerName;\n    }\n\n    private addUndoButtonHandler(){\n        const button = document.getElementById('button1');\n        button.addEventListener('click', () => this.onClick());\n    }\n}","import { Piece } from \"./Pieces/Piece\";\nimport { Square } from \"./Square\";\nimport { Player } from \"./Player\";\n\nexport class Move {\n  private player: Player;\n  private startSquare: Square;\n  private destinationSquare: Square;\n  private movedPiece: Piece;\n  private capturedPiece: Piece;\n  private castlingMove: boolean = false;\n  private enPassanteMove: boolean = false;\n  private firstMove: boolean;\n\n  constructor(player: Player, startSquare: Square, destinationSquare: Square) {\n    this.player = player;\n    this.startSquare = startSquare;\n    this.destinationSquare = destinationSquare;\n    this.movedPiece = startSquare.getPiece();\n  }\n\n  getPlayer(): Player {\n    return this.player;\n  }\n\n  getStartSquare(): Square {\n    return this.startSquare;\n  }\n\n  getDestinationSquare(): Square {\n    return this.destinationSquare;\n  }\n\n  getMovedPiece(): Piece {\n    return this.movedPiece;\n  }\n\n  getCapturedPiece(): Piece {\n      return this.capturedPiece;\n  }\n\n  setCapturedPiece(capturedPiece: Piece){\n      this.capturedPiece = capturedPiece;\n  }\n\n  isEnPassanteMove(): boolean {\n      return this.enPassanteMove;\n  }\n\n  setEnPassanteMove(enPassante: boolean): void {\n      this.enPassanteMove = enPassante;\n  }\n\n  isCastlingMove(): boolean {\n    return this.castlingMove;\n  }\n\n  setCastlingMove(castlingMove: boolean) {\n    this.castlingMove = castlingMove;\n  }\n\n  getFirstMove() {\n    return this.firstMove;\n  }\n\n  setFirstMove(firstMove: boolean) {\n    this.firstMove = firstMove;\n  }\n}\n","import {Move} from './Move';\nimport { Square } from './Square';\nimport { Game } from './Game';\nexport class Player {\n  private name: string;\n  private timeRemaining: number;\n  private isWhite: boolean;\n\n  constructor(name: string, time: number, isWhite: boolean) {\n    this.name = name;\n    this.timeRemaining = time;\n    this.isWhite = isWhite;\n  }\n\n  isWhiteSide(){\n    return this.isWhite;\n  }\n\n  playedMove(startSquare: Square, destinationSquare:Square, game:Game): boolean{\n    let move = new Move(this, startSquare,destinationSquare);\n\n    return game.makeMove(move, this);\n  }\n}\n","import {Piece} from './Pieces/Piece'\n\nexport class Square {\n    private row: number;\n    private column: number;\n    private piece: Piece | null ;\n    private domSqare!: Element;\n\n    constructor(row: number, column: number){\n        this.row = row;\n        this.column = column; \n        this.piece = null;\n    }\n\n    getRow(): number {\n        return this.row;\n    }\n\n    getColumn(): number {\n        return this.column;\n    }\n\n    setPiece(piece: Piece) {\n        this.piece = piece;\n    }\n\n    getPiece(): Piece | null{\n        return this.piece;\n    }\n\n    setDomSquare(domSqare: Element) {\n        this.domSqare = domSqare;\n    }\n\n    getDomSquare() {\n        return this.domSqare;\n    }    \n}","export enum PieceType {\n    Pawn = './pieces/Pawn.svg',\n    King = './pieces/King.svg',\n    Queen = './pieces/Queen.svg',\n    Rook = './pieces/Rook.svg',\n    Bishop = './pieces/Bishop.svg',\n    Knight = './pieces/Knight.svg',\n}","export function drawImage(src: string, color: string): HTMLElement {\n    const pieceImage = new Image();\n    pieceImage.src = src;\n    pieceImage.setAttribute('class', color);\n    return pieceImage;\n}\n","import { Board } from '../Board';\nimport {Square} from '../Square';\nimport { PieceType } from './PieceType';\nimport {drawImage} from \"../../display/DrawPiece\";\n\nexport abstract class Piece {\n    private killed: boolean = false;\n    private moved: boolean = false;\n    private white: boolean = false;\n\n    constructor(white:boolean) { \n        this.white = white; \n    } \n  \n    public isWhite():boolean { \n        return this.white; \n    }\n\n    hasMoved():boolean{\n        return this.moved;\n    }\n\n    setMoved(moved: boolean):void{\n        this.moved = moved;\n    }\n\n    public isKilled():boolean{ \n        return this.killed; \n    } \n  \n    public kill(square:Square):void{ \n        this.killed = true;\n        square.getDomSquare().innerHTML = null;\n    }\n    \n    public revive(){\n        this.killed = false;\n    }\n\n    public draw(removeFrom:Square | null, addTo: Square):void{\n        let pieceColour = (this.isWhite()) ? 'white' : 'black';\n        let pieceType = (this.constructor.name);\n        addTo.getDomSquare().append(drawImage(PieceType[pieceType], pieceColour));\n        if(removeFrom != null)\n            removeFrom.getDomSquare().innerHTML = null;\n    }\n\n    public abstract canMove(from:Square, to:Square, board:Board):boolean;\n    public abstract canAttack(from:Square, to:Square, board:Board):boolean;\n}","export enum MoveDirection{\n    UP,\n    Down\n}","import { Square } from \"../Square\";\nimport { Piece } from \"./Piece\";\nimport { MoveDirection } from \"../MoveDirection\";\nimport { Board } from \"../Board\";\n\nexport class Pawn extends Piece {\n  private promoted: boolean;\n  private promotedTo: Piece;\n  private moveDirection: MoveDirection;\n\n  constructor(white: boolean) {\n    super(white);\n    this.promoted = false;\n    this.moveDirection = white ? MoveDirection.UP : MoveDirection.Down;\n  }\n\n  isPromoted(): boolean {\n    return this.promoted;\n  }\n  setPromoted(promoted: boolean) {\n    this.promoted = promoted;\n  }\n\n  promoteTo(piece: Piece) {\n    this.promotedTo = piece;\n  }\n\n  isPromotedTo(): Piece {\n    return this.promotedTo;\n  }\n\n  getDirection(): MoveDirection {\n    return this.moveDirection;\n  }\n\n  setDirection(newDirection: MoveDirection) {\n    this.moveDirection = newDirection;\n  }\n\n  public canMove(from: Square, to: Square, board: Board): boolean {\n    let direction = this.getDirection();\n    let verticalDistance: number =\n      (direction == MoveDirection.UP ? -1 : 1) * (from.getRow() - to.getRow());\n    let horizontalDistance: number = Math.abs(from.getColumn() - to.getColumn());\n\n    // pawn can't jump over piece from initial position\n    let sqaureInFront = board.getSquares()[direction == MoveDirection.UP ? 2 : 5][from.getColumn()];\n\n    if (to.getPiece() && (to.getPiece().isWhite() == this.isWhite())) {\n      return false;\n    }\n\n    //zwykły ruch\n    //check if destination is empty\n    if (to.getPiece() == null && horizontalDistance == 0) {\n      //check if it's first move and there's nothing in front\n      if (!this.hasMoved() && sqaureInFront.getPiece() == null) {\n        return verticalDistance == 1 || verticalDistance == 2;\n      }\n      //this is not first move\n      else {\n        return verticalDistance == 1;\n      }\n    }\n\n    //bicie\n    if(this.canAttack(from, to, board) && (to.getPiece() != null && to.getPiece().isWhite() != from.getPiece().isWhite())){\n      return true;\n    } \n\n    return this.isEnPassant(from, to, board);\n  }\n\n  isEnPassant(from: Square, to: Square, board: Board): boolean{\n\n    let direction = this.getDirection();\n    let verticalDistance: number = (direction == MoveDirection.UP ? -1 : 1) * (from.getRow() - to.getRow());\n    const recentMove = board.getGame().getRecentMove();\n\n    // check if destination is valid\n    if (to.getPiece() == null && verticalDistance == 1 && recentMove != null) {\n\n      // check if moved piece was Pawn\n      if (!(recentMove.getMovedPiece() instanceof Pawn)) {\n        return false;\n      }\n\n      // check if horizontal distance between pieces was 1\n      if (!(Math.abs(recentMove.getStartSquare().getColumn() - from.getColumn()) == 1)) {\n        return false;\n      }\n\n      //check vertical distance between pawns\n      let verticalDistanceBetweenPawns = (recentMove.getDestinationSquare().getRow() - from.getRow());\n      if(verticalDistanceBetweenPawns != 0){\n        return false;\n      }\n\n      // check if we want kill for good side (left/right)\n      if (recentMove.getDestinationSquare().getColumn() != to.getColumn()){\n        return false;\n      }\n\n      // check if it was double square move\n      if (!(Math.abs(recentMove.getStartSquare().getRow() - recentMove.getDestinationSquare().getRow()) == 2)) {\n        return false;\n      }\n      return true;\n    }\n  }\n\n  canAttack(from: Square, to: Square, board: Board):boolean{\n\n    let direction = this.getDirection();\n    let verticalDistance: number =\n      (direction == MoveDirection.UP ? -1 : 1) * (from.getRow() - to.getRow());\n    let horizontalDistance: number = Math.abs(from.getColumn() - to.getColumn());\n\n    \n      return verticalDistance == 1 && horizontalDistance == 1;\n    \n  }\n\n  //TODO\n  //promocja pionka\n}\n","import { Square } from \"../Square\";\nimport { Piece } from \"./Piece\";\nimport { Board } from \"../Board\";\n\nexport class Knight extends Piece {\n\n  constructor(white: boolean) {\n    super(white);\n  }\n\n  public canMove(from: Square, to: Square, board: Board): boolean {\n\n    let verticalDistance: number = Math.abs(from.getRow() - to.getRow());\n    let horizontalDistance: number = Math.abs(from.getColumn() - to.getColumn());\n\n    if (to.getPiece() && (to.getPiece().isWhite() == this.isWhite())) {\n      return false;\n    }\n    return verticalDistance * horizontalDistance == 2;\n  }\n  public canAttack(from: Square, to: Square, board: Board): boolean {\n    return this.canMove(from, to, board);\n  }\n}\n","import { Square } from \"../Square\";\nimport { Piece } from \"./Piece\";\nimport { Board } from \"../Board\";\n\nexport class Bishop extends Piece {\n\n  constructor(white: boolean) {\n    super(white);\n  }\n\n  public canMove(from: Square, to: Square, board: Board): boolean {\n\n    let verticalDistanceDelta: number = Math.abs(to.getRow()- from.getRow());\n    let horizontalDistanceDelta: number = Math.abs(to.getColumn()- from.getColumn());\n\n    let verticalDistance: number = to.getRow()- from.getRow();\n    let horizontalDistance: number = to.getColumn() - from.getColumn();\n\n    let verticalDirection = (verticalDistance == 0)? 0 : (verticalDistance/verticalDistanceDelta);\n    let horizontalDirection = (horizontalDistance == 0)? 0 : ((horizontalDistance/horizontalDistanceDelta));\n\n    let distance = (verticalDistanceDelta > 0)? verticalDistanceDelta : horizontalDistanceDelta;\n    \n    if (to.getPiece() && (to.getPiece().isWhite() == this.isWhite())) {\n      return false;\n    }\n\n    if(verticalDistanceDelta - horizontalDistanceDelta == 0 ){\n        for(let i = 1; i < distance; i++){\n            let checkedSquareV = from.getRow() + (i * verticalDirection);\n            let checkedSquareH = from.getColumn() + (i * horizontalDirection);\n            if(board.getSquares()[checkedSquareV][checkedSquareH].getPiece() != null){\n                return false;\n            }\n        }\n        return true;\n    }\n  }\n  public canAttack(from: Square, to: Square, board: Board): boolean {\n    return this.canMove(from, to, board);\n}\n}\n","import { Square } from \"../Square\";\nimport { Piece } from \"./Piece\";\nimport { Board } from \"../Board\";\n\nexport class Rook extends Piece {\n\n  constructor(white: boolean) {\n    super(white);\n  }\n\n  public canMove(from: Square, to: Square, board: Board): boolean {\n\n    let verticalDistanceDelta: number = Math.abs(to.getRow()- from.getRow());\n    let horizontalDistanceDelta: number = Math.abs(to.getColumn()- from.getColumn());\n\n    let verticalDistance: number = to.getRow()- from.getRow();\n    let horizontalDistance: number = to.getColumn() - from.getColumn();\n\n    let verticalDirection = (verticalDistance == 0)? 0 : (verticalDistance/verticalDistanceDelta);\n    let horizontalDirection = (horizontalDistance == 0)? 0 : ((horizontalDistance/horizontalDistanceDelta));\n\n    let distance = (verticalDistanceDelta > 0)? verticalDistanceDelta : horizontalDistanceDelta;\n\n    if (to.getPiece() && (to.getPiece().isWhite() == this.isWhite())) {\n      return false;\n    }\n\n    if(verticalDistanceDelta * horizontalDistanceDelta == 0){\n        for(let i = 1; i < distance; i++){\n            let checkedSquareV = from.getRow() + (i * verticalDirection);\n            let checkedSquareH = from.getColumn() + (i * horizontalDirection);\n            if(board.getSquares()[checkedSquareV][checkedSquareH].getPiece() != null){\n                return false;\n            }\n        }\n        return true;\n    }\n  }\n\n  public canAttack(from: Square, to: Square, board: Board): boolean {\n    return this.canMove(from, to, board);\n  }\n}\n","import { Square } from \"../Square\";\nimport { Piece } from \"./Piece\";\nimport { Board } from \"../Board\";\n\nexport class Queen extends Piece {\n\n  constructor(white: boolean) {\n    super(white);\n  }\n\n  public canMove(from: Square, to: Square, board: Board): boolean {\n\n    let verticalDistanceDelta: number = Math.abs(to.getRow()- from.getRow());\n    let horizontalDistanceDelta: number = Math.abs(to.getColumn()- from.getColumn());\n\n    let verticalDistance: number = to.getRow()- from.getRow();\n    let horizontalDistance: number = to.getColumn() - from.getColumn();\n\n    let verticalDirection = (verticalDistance == 0)? 0 : (verticalDistance/verticalDistanceDelta);\n    let horizontalDirection = (horizontalDistance == 0)? 0 : ((horizontalDistance/horizontalDistanceDelta));\n\n    let distance = (verticalDistanceDelta > 0)? verticalDistanceDelta : horizontalDistanceDelta;\n\n    if (to.getPiece() && (to.getPiece().isWhite() == this.isWhite())) {\n      return false;\n    }\n\n    if(verticalDistanceDelta * horizontalDistanceDelta == 0){\n        for(let i = 1; i < distance; i++){\n            let checkedSquareV = from.getRow() + (i * verticalDirection);\n            let checkedSquareH = from.getColumn() + (i * horizontalDirection);\n            if(board.getSquares()[checkedSquareV][checkedSquareH].getPiece() != null){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    if(verticalDistanceDelta - horizontalDistanceDelta == 0 ){\n        for(let i = 1; i < distance; i++){\n            let checkedSquareV = from.getRow() + (i * verticalDirection);\n            let checkedSquareH = from.getColumn() + (i * horizontalDirection);\n            if(board.getSquares()[checkedSquareV][checkedSquareH].getPiece() != null){\n                return false;\n            }\n        }\n        return true;\n    }\n  }\n  \n  public canAttack(from: Square, to: Square, board: Board): boolean {\n    return this.canMove(from, to, board);\n  }\n}\n","import { Square } from \"../Square\";\nimport { Piece } from \"./Piece\";\nimport { Board } from \"../Board\";\nimport { Rook } from \"./Rook\";\n\nexport class King extends Piece {\n  private castlingDone: boolean = false;\n  private location: Square;\n\n  constructor(white: boolean) {\n    super(white);\n  }\n\n  public isCastlingDone(): boolean {\n    return this.castlingDone;\n  }\n\n  public setCastlingDone(castlingDone: boolean) {\n    this.castlingDone = castlingDone;\n  }\n\n  public canMove(from: Square, to: Square, board: Board): boolean {\n\n    let verticalDistanceDelta: number = Math.abs(to.getRow() - from.getRow());\n    let horizontalDistanceDelta: number = Math.abs(to.getColumn() - from.getColumn());\n\n    //destination doesn't have any of my piece\n    if (to.getPiece() && to.getPiece().isWhite() == this.isWhite()) {\n      return false;\n    }\n\n    if(board.isDestinationUnderAttack(from, to, board)){\n      return false;\n    }\n  \n    if(Math.max(verticalDistanceDelta, horizontalDistanceDelta) == 1){\n      return true;\n    }\n\n    if(this.isValidCastling(from, to, board)){\n      return true;\n    }\n  }\n\n  public isValidCastling(from: Square, to: Square, board: Board):boolean{\n    \n    if(this.hasMoved()){\n        return false;\n    }\n\n    if(this.isCastlingDone()){\n        return false;\n    }\n\n    let verticalDistanceDelta: number = Math.abs(to.getRow() - from.getRow());\n    let horizontalDistanceDelta: number = Math.abs(to.getColumn() - from.getColumn());\n    let horizontalDistance: number = to.getColumn() - from.getColumn();\n\n    //check if castling Rook has moved\n    let castlingRook: Rook;\n    let castlingRookHorizontalPosition: number;\n    (horizontalDistance < 0)? castlingRookHorizontalPosition = 0 : castlingRookHorizontalPosition = 7;\n    castlingRook = board.getSquares()[from.getRow()][castlingRookHorizontalPosition].getPiece();\n\n    if(castlingRook == null){\n      return false;\n    } \n    if(castlingRook.hasMoved()) {\n      return false;\n    }\n    \n    //check if there's no piece in between\n    let horizontalDirection = (horizontalDistance/horizontalDistanceDelta);\n    for(let i = 1; i < horizontalDistanceDelta; i++){\n        let checkedSquareH = from.getColumn() + (i * horizontalDirection);\n        if(board.getSquares()[from.getRow()][checkedSquareH].getPiece()){\n            return false;\n        }\n    }\n\n    //is this correct square?\n    if(verticalDistanceDelta == 0 && horizontalDistanceDelta == 2){\n        return true;\n    }\n  }\n\n  public canAttack(from: Square, to: Square, board: Board): boolean {\n    return false;\n  }\n\n  getLocation(){\n    return this.location;\n  }\n\n  setLocation(location: Square){\n    this.location = location;\n  }\n}\n","import { Square } from \"./Square\";\nimport { Pawn } from \"./Pieces/Pawn\";\nimport { PieceType } from \"./Pieces/PieceType\";\nimport { Game } from \"./Game\";\nimport { Knight } from \"./Pieces/Knight\";\nimport { Bishop } from \"./Pieces/Bishop\";\nimport { Rook } from \"./Pieces/Rook\";\nimport { Queen } from \"./Pieces/Queen\";\nimport { King } from \"./Pieces/King\";\nimport { Piece } from \"./Pieces/Piece\";\nimport {drawImage} from \"../display/DrawPiece\";\n\nexport class Board {\n  private game: Game;\n  private squares: Square[][] = [];\n  private selectedSquares: Square[] = [];\n  highlightedSquares: Square[] = [];\n\n  constructor(game: Game) {\n    this.game = game;\n    this.initializeBoard();\n  }\n\n  private initializeBoard() {\n    const domSquares = document.getElementById(\"board\").getElementsByClassName(\"box\");\n    for (let i = 0; i < 8 ; i++) {\n      this.squares[i] = [];\n      for (let j = 0; j < 8; j++) {\n        this.squares[i][j] = new Square(i, j);\n        this.squares[i][j].setDomSquare(domSquares[8 * i + j]);\n        this.assignEventListener(this.squares[i][j]);\n      }\n    }\n     this.initializePieces();\n  }\n\n  assignEventListener(square: Square) {\n    square\n      .getDomSquare()\n      .addEventListener(\"click\", () => this.clickHandler(square));\n  }\n\n  clickHandler(square: Square) {\n    //check if the click intends to select piece and assign it as 1st click\n    if (square.getPiece() != null && square.getPiece().isWhite() == this.game.getCurrentTurn().isWhiteSide()) {\n      if(square != this.selectedSquares[0]){\n        this.clearHighlightedSquares();\n      }\n      this.selectedSquares[0] = square;\n      this.highlightSquares();\n    }\n\n    //check if the click intends to select destination and assign it as 2nd click\n    if (this.selectedSquares.length) {\n      if (square.getPiece() == null || square.getPiece().isWhite() != this.game.getCurrentTurn().isWhiteSide()) {\n        this.selectedSquares[1] = square;\n        this.game.getCurrentTurn().playedMove(this.selectedSquares[0], this.selectedSquares[1], this.game);\n        this.clearHighlightedSquares();\n        this.selectedSquares = [];\n      }\n    }\n  }\n\n  //highlight all possible moves, if it's capturing move or enPassante move highlight as attack\n  highlightSquares() {\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let selectedPiece: Piece = this.selectedSquares[0].getPiece();\n        if (selectedPiece.canMove(this.selectedSquares[0], this.getSquares()[i][j], this)) {\n          this.getSquares()[i][j].getDomSquare().classList.add(\"active\");\n          if((this.getSquares()[i][j].getPiece() != null && (this.getSquares()[i][j].getPiece().isWhite() != this.game.getCurrentTurn().isWhiteSide())) || (selectedPiece instanceof Pawn && selectedPiece.isEnPassant(this.selectedSquares[0], this.getSquares()[i][j], this))){\n            this.getSquares()[i][j].getDomSquare().classList.add(\"beating\");\n          }\n          this.highlightedSquares.push(this.getSquares()[i][j]);\n        }\n      }\n    }\n  }\n\n  clearHighlightedSquares() {\n    this.highlightedSquares.forEach((element) => {\n      element.getDomSquare().classList.remove(\"active\", \"beating\");\n    });\n    this.highlightedSquares = [];\n  }\n\n  private initializePieces() {\n    const white: string = 'white';\n    const black: string = 'black';\n    for (let i = 0; i < 8; i++) {\n      this.squares[1][i].setPiece(new Pawn(true));\n      this.squares[1][i].getDomSquare().append(drawImage(PieceType.Pawn, white));\n\n      this.squares[6][i].setPiece(new Pawn(false));\n      this.squares[6][i].getDomSquare().append(drawImage(PieceType.Pawn, black));\n    }\n    this.squares[0][1].setPiece(new Knight(true));\n    this.squares[0][1].getDomSquare().append(drawImage(PieceType.Knight, white));\n    this.squares[0][6].setPiece(new Knight(true));\n    this.squares[0][6].getDomSquare().append(drawImage(PieceType.Knight, white));\n    this.squares[0][2].setPiece(new Bishop(true));\n    this.squares[0][2].getDomSquare().append(drawImage(PieceType.Bishop, white));\n    this.squares[0][5].setPiece(new Bishop(true));\n    this.squares[0][5].getDomSquare().append(drawImage(PieceType.Bishop, white));\n    this.squares[0][0].setPiece(new Rook(true));\n    this.squares[0][0].getDomSquare().append(drawImage(PieceType.Rook, white));\n    this.squares[0][7].setPiece(new Rook(true));\n    this.squares[0][7].getDomSquare().append(drawImage(PieceType.Rook, white));\n    this.squares[0][3].setPiece(new Queen(true));\n    this.squares[0][3].getDomSquare().append(drawImage(PieceType.Queen, white));\n    this.squares[0][4].setPiece(new King(true));\n    this.squares[0][4].getDomSquare().append(drawImage(PieceType.King, white));\n\n    this.squares[7][1].setPiece(new Knight(false));\n    this.squares[7][1].getDomSquare().append(drawImage(PieceType.Knight, black));\n    this.squares[7][6].setPiece(new Knight(false));\n    this.squares[7][6].getDomSquare().append(drawImage(PieceType.Knight, black));\n    this.squares[7][2].setPiece(new Bishop(false));\n    this.squares[7][2].getDomSquare().append(drawImage(PieceType.Bishop, black));\n    this.squares[7][5].setPiece(new Bishop(false));\n    this.squares[7][5].getDomSquare().append(drawImage(PieceType.Bishop, black));\n    this.squares[7][0].setPiece(new Rook(false));\n    this.squares[7][0].getDomSquare().append(drawImage(PieceType.Rook, black));\n    this.squares[7][7].setPiece(new Rook(false));\n    this.squares[7][7].getDomSquare().append(drawImage(PieceType.Rook, black));\n    this.squares[7][3].setPiece(new Queen(false));\n    this.squares[7][3].getDomSquare().append(drawImage(PieceType.Queen, black));\n    this.squares[7][4].setPiece(new King(false));\n    this.squares[7][4].getDomSquare().append(drawImage(PieceType.King, black));\n  }\n\n  isDestinationUnderAttack(from: Square, destination: Square, board: Board): boolean{\n    for (let i = 0; i < 8; i++) {\n      for (let j = 0; j < 8; j++) {\n        let attackingPiece = board.getSquares()[i][j].getPiece();\n        if(attackingPiece != null && (this.game.getCurrentTurn().isWhiteSide() != attackingPiece.isWhite())){\n          if(attackingPiece.canAttack(board.getSquares()[i][j], destination, board)){\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  getSquares(): Square[][] {\n    return this.squares;\n  }\n\n  getGame() {\n    return this.game;\n  }\n}\n","export enum GameStatus { \n    ACTIVE, \n    BLACK_WIN, \n    WHITE_WIN, \n    STALEMATE, \n}","import { Player } from \"./Player\";\nimport { Board } from \"./Board\";\nimport { Move } from \"./Move\";\nimport { Pawn } from \"./Pieces/Pawn\";\nimport { King } from \"./Pieces/King\";\nimport { Rook } from \"./Pieces/Rook\";\nimport { Square } from \"./Square\";\nimport { GameStatus } from \"./GameStatus\";\nexport class Game {\n  private players: Player[] = [];\n  private board: Board;\n  private currentTurn: Player;\n  private movesPlayed: Move[];\n  private gameStatus: GameStatus = GameStatus.ACTIVE;\n\n  constructor(firstName: string, secondName: string, timeLimit: number) {\n    this.players[0] = new Player(firstName, timeLimit, true);\n    this.players[1] = new Player(secondName, timeLimit, false);\n    this.currentTurn = this.players[0];\n    this.board = new Board(this);\n    this.movesPlayed = [];\n  }\n\n  recordMove(move: Move) {\n    this.movesPlayed.push(move);\n  }\n\n  //validates and executes played move\n  makeMove(move: Move, player: Player): boolean {\n    let sourcePiece = move.getStartSquare().getPiece();\n\n    //is there anybody out there?\n    if (!sourcePiece) {\n      return false;\n    }\n\n    //is it your turn?\n    if (player != this.currentTurn) {\n      return false;\n    }\n\n    //is it your piece?\n    if (sourcePiece.isWhite() != player.isWhiteSide()) {\n      return false;\n    }\n\n    //can you move it?\n    if (\n      !sourcePiece.canMove(move.getStartSquare(), move.getDestinationSquare(), this.board)\n    ) {\n      return false;\n    }\n\n    //are we gonna kill somepiece?\n    let destinationPiece = move.getDestinationSquare().getPiece();\n    if (destinationPiece) {\n      destinationPiece.kill(move.getDestinationSquare());\n      move.setCapturedPiece(destinationPiece);\n    }\n\n    //is this enPassant move?\n    if(sourcePiece instanceof Pawn && sourcePiece.isEnPassant(move.getStartSquare(), move.getDestinationSquare(), this.board)){\n        this.getRecentMove().getMovedPiece().kill(this.getRecentMove().getDestinationSquare());\n        move.setEnPassanteMove(true);\n        move.setCapturedPiece(this.getRecentMove().getMovedPiece());  \n    }\n\n    //is this castling move?\n    if (sourcePiece instanceof King && sourcePiece.isValidCastling(move.getStartSquare(), move.getDestinationSquare(), this.board)){\n\n        let currentRow = move.getStartSquare().getRow();\n        let horizontalDistance: number = move.getDestinationSquare().getColumn()- move.getStartSquare().getColumn();\n        let horizontalDistanceDelta: number = Math.abs(horizontalDistance);\n        let horizontalDirection = horizontalDistance/horizontalDistanceDelta;\n\n        //find castling Rook and set moved flag\n        let castlingRook: Rook;\n        let RookColumnBeforeCastling: number;\n        (horizontalDistance < 0)? RookColumnBeforeCastling = 0 : RookColumnBeforeCastling = 7;\n        castlingRook = this.board.getSquares()[currentRow][RookColumnBeforeCastling].getPiece();\n        castlingRook.setMoved(true);\n\n        //Move rook to new position\n        let RookSquareBeforeCastling: Square = this.board.getSquares()[currentRow][RookColumnBeforeCastling];\n        let RookColumnAfterCastling: number = move.getStartSquare().getColumn() + horizontalDirection;\n        let RookSquareAfterCastling: Square = this.board.getSquares()[currentRow][RookColumnAfterCastling];\n\n        RookSquareBeforeCastling.setPiece(null);\n        RookSquareAfterCastling.setPiece(castlingRook);\n        castlingRook.draw(RookSquareBeforeCastling, RookSquareAfterCastling);\n\n        sourcePiece.setCastlingDone(true);\n        move.setCastlingMove(true);\n    }\n\n    //save move\n    this.recordMove(move);\n\n    //execute move\n    move.getMovedPiece().draw(move.getStartSquare(), move.getDestinationSquare());\n    move.getDestinationSquare().setPiece(move.getStartSquare().getPiece());\n    move.getStartSquare().setPiece(null);\n\n    //You've moved, have you?\n    if(!sourcePiece.hasMoved()){\n        move.setFirstMove(true);\n        sourcePiece.setMoved(true);\n    }\n\n    //The king is dead\n    if(destinationPiece != null && destinationPiece instanceof King){\n      if(player.isWhiteSide()){\n        this.setStatus(GameStatus.WHITE_WIN);\n      } else{\n        this.setStatus(GameStatus.BLACK_WIN);\n      }\n    }\n\n    //switch turn\n    if (this.currentTurn === this.players[0]) {\n      this.currentTurn = this.players[1];\n    } else {\n      this.currentTurn = this.players[0];\n    }\n    return true;\n  }\n\n  getCurrentTurn(): Player {\n    return this.currentTurn;\n  }\n\n  setCurrentTurn(currentPlayer: Player): void{\n      this.currentTurn = currentPlayer;\n  }\n\n  getMovesPlayed(): Move[]{\n      return this.movesPlayed;\n  }\n\n  getRecentMove(): Move{\n    return this.movesPlayed[this.movesPlayed.length-1];\n  }\n\n  getStatus():GameStatus{\n    return this.gameStatus;\n  }\n\n  setStatus(status: GameStatus){\n    this.gameStatus = status;\n  }\n\n  undoMove(): void {\n\n    if(this.movesPlayed != undefined && this.movesPlayed.length != 0){\n      const recentMove = this.getRecentMove();\n      const pieceToMoveBack = recentMove.getMovedPiece();\n      const attackedPiece = recentMove.getCapturedPiece()\n      this.movesPlayed.pop();\n\n      pieceToMoveBack.draw(recentMove.getDestinationSquare(), recentMove.getStartSquare());\n      recentMove.getStartSquare().setPiece(pieceToMoveBack);\n      recentMove.getDestinationSquare().setPiece(null);\n\n      if(recentMove.getFirstMove()) {\n        pieceToMoveBack.setMoved(false);\n      }\n\n      if(recentMove.isCastlingMove()) {\n        const kingsCastlingPosition = recentMove.getDestinationSquare();\n        pieceToMoveBack.setMoved(false);\n        (pieceToMoveBack as King).setCastlingDone(false);\n        \n        if(kingsCastlingPosition.getColumn() == 2){\n\n          const rookPosition = this.board.getSquares()[kingsCastlingPosition.getRow()][3];\n          const rook = rookPosition.getPiece();\n          const rookPrevPosition = this.board.getSquares()[kingsCastlingPosition.getRow()][0];\n          rook.draw(rookPosition, rookPrevPosition);\n          rookPosition.setPiece(null);\n          rookPrevPosition.setPiece(rook);\n          rook.setMoved(false);\n\n        } else {\n\n          const rookPosition = this.board.getSquares()[kingsCastlingPosition.getRow()][5];\n          const rook = rookPosition.getPiece();\n          const rookPrevPosition = this.board.getSquares()[kingsCastlingPosition.getRow()][7];\n          rook.draw(rookPosition, rookPrevPosition);\n          rookPosition.setPiece(null);\n          rookPrevPosition.setPiece(rook);\n          rook.setMoved(false);\n\n        }\n      }\n    \n      if(attackedPiece != null){\n        const attackedSquare = recentMove.getDestinationSquare();\n        attackedPiece.revive();  \n\n        if(recentMove.isEnPassanteMove()){\n          let enPassanteAttackedSquare;\n\n          if(attackedPiece.isWhite()){\n            enPassanteAttackedSquare = this.board.getSquares()[attackedSquare.getRow() + 1][attackedSquare.getColumn()];\n          } else {\n            enPassanteAttackedSquare = this.board.getSquares()[attackedSquare.getRow() - 1][attackedSquare.getColumn()];\n          }\n          \n          attackedPiece.draw(null, enPassanteAttackedSquare);\n          enPassanteAttackedSquare.setPiece(attackedPiece);\n        } else { \n          attackedPiece.draw(null, attackedSquare);\n          attackedSquare.setPiece(attackedPiece);\n        }        \n        \n      }\n      this.currentTurn = recentMove.getPlayer();\n    }\n    \n  }\n}\n","import { URLParameters } from './display/URLParameters'\nimport { GamePage } from './display/GamePage';\nimport { Game } from './game/Game';\n\nexport const ChessApp = () => {\n    const urlParameters = new URLParameters(window.location.search);\n\n    const gamePage= new GamePage(urlParameters.getFirstName(), urlParameters.getSecondName());\n    const game = new Game(urlParameters.getFirstName(), urlParameters.getSecondName(), parseInt(urlParameters.getTime()));\n\n    gamePage.addOnClick(game.undoMove.bind(game));\n    gamePage.displayGameInfo();   \n}\n","import { ChessApp } from './app/ChessApp';\n\nwindow.onload = () => ChessApp();\n\n\n"]}